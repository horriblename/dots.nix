;; ---------------------
;; Variable definitions
;; ---------------------
;; Constants
(defvar BRIGHTNESS_ICON "î†¬")
(defvar ShowPowerButton false)

;(defpoll pollBrightness :interval "5s"
;  :initial '100'
;  `brightnessctl i -m --exponent=2`)

(deflisten pollBrightness
  :initial 100
  `brightnessctl i -m --exponent=2 | head -n 1 | sed -E 's/.*,(.*)%.*/\1/'`)

;; ---------------------
;; Widget definitions
;; ---------------------

(defwidget _brightnessSlider [brightness]
  (scale :class "brightness-bar"
         :marks true
         :round-digits 0
         :hexpand true
         :value 20 ;; TODO brightness
         :min 5
         :max 100
         :onchange `brightnessctl set --exponent=2 {}%`
         :orientation 'h'))

(defwidget _quick_setting_info [icon class text]
  (box :class "quick-setting-unit ${class}"
       :space-evenly false
    (label :class "icon" :text icon)
    (label :text text)))

(defwidget _quick_setting_btn [icon onclick ?class ?style]
  (button :class "quick-setting-btn ${class ?: ''}"
          :timeout '5s'
          :style {style ?: ""}
          :onclick onclick
    (label :class "icon" :text icon)))

;; TODO don't use _volInSlider & _volOutSlider
(defwidget _quick_settings_applet [volumeIn volumeOut batteryLvl brightness netStat]
  (box :class "quick-settings"
       :orientation "v" 
    (eventbox :onhoverlost "${EWW_CMD} update ShowPowerButton=false"
      (box :orientation "h"
           :class "qs-power-options"
           :halign "end"
           :hexpand true
           :space-evenly false
      (revealer :transition "slideleft"
                :reveal ShowPowerButton
        (box :orientation "h"
             :hexpand true
				 :spacing "20px"
             :class "qs-extended-power-options"
          (_quick_setting_btn
            :icon "Lock"
            :class ""
            :onclick "swaylock")
          (_quick_setting_btn
            :icon "Bedtime"
            :class ""
            :onclick "systemctl suspend")
          (_quick_setting_btn
            :icon "Logout" 
            :class ""
            :onclick "hyprctl dispatch exit 1")
          (_quick_setting_btn
            :icon "Restart_Alt"
            :class ""
            :onclick "systemctl restart")
          ))
      (_quick_setting_btn
        :icon {ShowPowerButton? "Power_Rounded": "Settings_Power "}
        :style "color: crimson;"
        :class ""
        :onclick {ShowPowerButton? "systemctl poweroff" : "${EWW_CMD} update ShowPowerButton=true"})))
    (box :orientation "h"
      (_quick_setting_btn
        :icon "Screenshot_Monitor"
        :class ""
        :onclick "hyprctl dispatch exec '${EWW_CMD} close quick_settings_win; screenshot'")
      (_quick_setting_btn
        :icon "Abc"
        :class ""
        :onclick "${EWW_CMD} close quick_settings_win; ocr&")
      (_quick_setting_btn
        :icon "Keyboard"
        :class ""
        :onclick "wf-osk -a bottom &"))
    (box :orientation "h"
      (box :class "quick-setting-unit qs-volume-in"
           :space-evenly false
        (label :class "icon" :text {MIC_ICONS[1]})
        (_volInSlider :volumeIn volumeIn))
      (box :class "quick-setting-unit qs-volume-out"
           :space-evenly false
        (label :class "icon" :text {SPEAKER_ICONS[3]})
        (_volOutSlider :volumeOut volumeOut :flipped false)))
    (box :orientation "h"
      (box :class "quick-setting-unit qs-brightness"
           :space-evenly false
        (label :class "icon" :text BRIGHTNESS_ICON)
        (_brightnessSlider :brightness brightness)))
    (box :orientation "h"
      (_quick_setting_info
        :icon {NET_ICONS[netStat.type]} 
        :class "qs-network"
        :text {netStat.name})
      (_quick_setting_info
        :icon {BATTERY_ICONS[4]} 
        :class "qs-battery"
        :text "${batteryLvl}%"))
    (box :orientation "h"
      (_quick_setting_btn
        :icon "Rotate_Right"
        :class ""
        :onclick "scripts/rotate-screen clockwise ${EWW_CMD}")
      (_quick_setting_btn
        :icon "Swap_Vert" 
        :class ""
        :onclick "scripts/rotate-screen vertical ${EWW_CMD}")
      (_quick_setting_btn
        :icon "Rotate_Left" 
        :class ""
        :onclick "scripts/rotate-screen anti-clockwise ${EWW_CMD}"))))

(defwindow quick_settings_win
  :monitor 0
  :geometry (geometry :anchor "top right")
  (eventbox :onhoverlost `${EWW_CMD} close quick_settings_win`
    (_quick_settings_applet 
      :volumeIn lVolumeIn
      :volumeOut lVolumeOut
      :batteryLvl { EWW_BATTERY.total_avg }
      :brightness pollBrightness
      :netStat pollNetStat)))

